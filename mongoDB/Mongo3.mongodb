MongoDB ASSIGNMENT 3


// 1.	Display all the documents in the collection restaurants.
    use ("restaurants")
    db.addresses.find().pretty()

// 2.	Display all the documents in the collection restaurants.
    use ("restaurants")
    db.addresses.find({}, 
    {_id:1, restaurant_id: 1, name:1, borough: 1, cuisine: 1}). pretty ()

// 3.	Display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant.
    use ("restaurants")
    db.addresses.find({}, 
    {_id:0, restaurant_id: 1, name:1, borough: 1, cuisine: 1}).pretty()

// 4.	Display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection restaurant
    use ("restaurants")
    db.addresses.find({},
    {_id:1, restaurant_id: 1, name:1, borough: 1, zipcode: 1}). pretty ()

// 5.	Display the first 5 restaurant which is in the borough Bronx.
    use ("restaurants")
    db.addresses.find({"borough" : "Bronx"}).limit(5).pretty()

// 6.	Display all the restaurant which is in the borough Bronx.
    use ("restaurants")
    db.addresses.find({"borough" : "Bronx"}).pretty()

// 7.	Display the next 5 restaurants after skipping first 5 which are in the borough Bronx.
    use ("restaurants")
    db.addresses.find({"borough" : "Bronx"}).skip(5).limit(5).pretty()

// 8.	Find the restaurants who achieved a score more than 90.
    use ("restaurants")
    db.addresses.find({"grades.score" : {"$gt" : 90}})

// 9.  Find the restaurants that achieved a score, more than 80 but less than 100
    use ("restaurants")
    db.addresses.find({$and : [
    {"grades.score" : {"$gt" : 80}},{"grades.score" : {"$lt" : 100}}
    ]}). pretty ()

// 10. find the restaurants which locate in latitude value less than -95.754168.
    use ("restaurants")
    db.addresses.find({"address.coord.0":{$lt : -95.754168}}).pretty()

// 11. find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168.
    use ("restaurants")
    db.addresses.find({$and:[{ "cuisine": {$ne: "American"}},
    {"address.coord.0": {$lt: -65.754168}},
    {"grades.score":{$gt:70}}]}).pretty()

// 12. find the restaurants which do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than -65.754168. Note : Do this query without using $and operator.
    use ("restaurants")
    db.addresses.find({$and:[{ "cuisine": {$ne: "American"}},
    {"address.coord.0": {$lt: -65.754168}},
    {"grades.score":{$gt:70}}]}).pretty()

// 13. find the restaurants which do not prepare any cuisine of 'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order.
    use ("restaurants")
    db.addresses.find({$and:[{ "cuisine": {$ne: "American"}},
    {"grades.grade":"A"},
    {"borough":{ $ne:"Brooklyn"}}]}).sort({"cuisine":-1}).pretty()

// 14. find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Wil' as first three letters for its name.
    use ("restaurants")
    db.addresses.find({"name":{$regex:/^Wil.*/}},
    { "reastaurant_id":1, "name":1, "borough":1, "cuisine":1}).pretty()

// 15. find the restaurant Id, name, borough and cuisine for those restaurants which contain 'ces' as last three letters for its name.
    use ("restaurants")
    db.addresses.find({"name":{$regex:/.*ces$/}},
    { "reastaurant_id":1, "name":1, "borough":1, "cuisine":1}).pretty()

// 16. find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Reg' as three letters somewhere in its name.
    use ("restaurants")
    db.addresses.find({"name":{$regex:/Reg/}},
    { "reastaurant_id":1, "name":1, "borough":1, "cuisine":1}).pretty()

// 17. find the restaurants which belong to the borough Bronx and prepared either American or Chinese dish.
    use ("restaurants")
    db. addresses.find({borough: "Bronx", cuisine: {$in:["American","Chinese"]}}, 
    {_id:0, restaurant_id:1, name:1, borough:1, cuisine:1}).pretty()

// 18. find the restaurant Id, name, borough and cuisine for those restaurants which belong to the borough Staten Island or Queens or Bronxor Brooklyn.
    use ("restaurants")
    db.addresses.find({$or: [{"borough": "Staten Island"}, {"borough": "Bronxor Brooklyn"}, {"borough": "Queens"}]}, {_id:0, restaurant_id:1, name:1, borough:1, cuisine:1}).pretty()

// 19. find the restaurant Id, name, borough and cuisine for those restaurants which are not belonging to the borough Staten Island or Queens or Bronxor Brooklyn.
    use ("restaurants")
    db.addresses.find({"borough": {$nin:["Staten Island","Bronxor Brooklyn","Queens"]}},
    {restaurant_id:1, name:1, borough:1, cuisine:1}).pretty()

// 20. find the restaurant Id, name, borough and cuisine for those restaurants which achieved a score which is not more than 10.
    use ("restaurants")
    db.addresses.find({"grades.score": {$lte:10}},
    {"restaurant_id":1, "name":1, "borough":1, "cuisine":1}).pretty()

// 21.	find the restaurant Id, name, borough and cuisine for those restaurants which prepared dish except 'American' and 'Chinese' or restaurant's name begins with letter 'Wil'.
    use ("restaurants")
    db.addresses.find({$nor: [{"cuisine":{$in:["American","Chinese"]}},
    {"name":/^Wil.*/}]},{ "restaurant_id":1, "name":1, "borough":1, "cuisine":1}).pretty()

// 22.	find the restaurant Id, name, and grades for those restaurants which achieved a grade of "A" and scored 11 on an ISODate "2014-08-11T00:00:00Z" among many of survey dates.
    use ("restaurants")
    db.addresses.find({"grades":{$elemMatch:{ "grade":"A","date":ISODate("2014-08-11T00:00:00Z"),"score":11}}},
    { "restaurant_id":1, "name":1, "grades":1}).pretty()


// 23.	find the restaurant Id, name and grades for those restaurants where the 2nd element of grades array contains a grade of "A" and score 9 on an ISODate "2014-08-11T00:00:00Z".
    use ("restaurants")
    db.rest.find({$and: [{"grades.1.grade":"A"}, 
    {"grades.1.score": 9}, 
    {"grades.1.date": ISODate("2014-08-11T00:00:00Z")}]},
    {_id:0, restaurant_id:1, name:1, grades:1}).pretty()

// 24.	find the restaurant Id, name, address and geographical location for those restaurants where 2nd element of coord array contains a value which is more than 42 and upto 52.
    use ("restaurants")
    db.rest.find({$and : [{"address.coord.1": {$gt : 42}},
    {"address.coord.1": {$lte : 52}}]},
    {_id:0, restaurant_id:1, name:1, address:1})

// 25.	arrange the name of the restaurants in ascending order along with all the columns.
    use ("restaurants")
    db.rest.find({},{_id:0, name:1}).sort( {name: 1})

// 26.	arrange the name of the restaurants in descending along with all the columns.
    use ("restaurants")
    db.rest.find({},{_id:0, name:1}).sort( {name: -1})

// 27.	arranged the name of the cuisine in ascending order and for that same cuisine borough should be in descending order.
    use ("restaurants")
    db.rest.find({}, {_id:0, cuisine:1, borough:1}).sort({cuisine: 1, borough: -1})

// 28.	know whether all the addresses contains the street or not.
    // With Street: 
    use ("restaurants")
    db.rest.find({"address.street": {$regex: /Street/}}).pretty()

    // Not with street:
    use ("restaurants")
    db.rest.find({"address.street": {$ne: {$regex: /Street/}}}).pretty()

// 29.	Write a MongoDB query which will select all documents in the restaurants collection where the coord field value is Double.
    use ("restaurants")
    db.rest.find({"address.coord": {$type: "double"}},
    {_id:0, address:1})

// 30.	Write a MongoDB query which will select the restaurant Id, name and grades for those restaurants which returns 0 as a remainder after dividing the score by 7.
    use ("restaurants")
    db.rest.find({"grades": {$elemMatch: {"score": {$mod: [7,0]}}}},
    {_id:0, restaurant_id:1, name:1, grades:1})

// 31.  find the restaurant name, borough, longitude and attitude and cuisine for those restaurants which contains 'mon' as three letters somewhere in its name.
    use ("restaurants")
    db.addresse.find({name: {$regex: /mon/}},
    {_id:0, name:1, borough:1, "address.coord":1, cuisine:1})

// 32. find the restaurant name, borough, longitude and latitude and cuisine for those restaurants which contain 'Mad' as first three letters of its name.
    use ("restaurants")
    db.rest.find({"name": {$regex: /^Mad.*/}},
    {_id:0, "name":1, "borough":1, "address.coord":1, cuisine:1}).pretty()
